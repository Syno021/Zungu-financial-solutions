/*
 * App Global CSS
 * ----------------------------------------------------------------------------
 * Put style rules here that you want to apply globally. These styles are for
 * the entire app and not just one component. Additionally, this file can be
 * used as an entry point to import other CSS/Sass files to be included in the
 * output CSS.
 * For more information on global stylesheets, visit the documentation:
 * https://ionicframework.com/docs/layout/global-stylesheets
 */

/* Core CSS required for Ionic components to work properly */
@import "@ionic/angular/css/core.css";

/* Basic CSS for apps built with Ionic */
@import "@ionic/angular/css/normalize.css";
@import "@ionic/angular/css/structure.css";
@import "@ionic/angular/css/typography.css";
@import "@ionic/angular/css/display.css";

/* Optional CSS utils that can be commented out */
@import "@ionic/angular/css/padding.css";
@import "@ionic/angular/css/float-elements.css";
@import "@ionic/angular/css/text-alignment.css";
@import "@ionic/angular/css/text-transformation.css";
@import "@ionic/angular/css/flex-utils.css";

/**
 * Ionic Dark Mode
 * -----------------------------------------------------
 * For more info, please see:
 * https://ionicframework.com/docs/theming/dark-mode
 */

/* @import "@ionic/angular/css/palettes/dark.always.css"; */
/* @import "@ionic/angular/css/palettes/dark.class.css"; */
@import "@ionic/angular/css/palettes/dark.system.css";

// Healixir Theme - Health, Life, and Positivity
// Global SCSS for Ionic Project - Emerald & Mint Focus

// Color Variables
$colors: (
  // Primary Colors - Emerald Green now as main primary
  primary: (
    base: #2E7D32, // Emerald Green - health, healing, vitality
    light: #4C9A51,
    dark: #1B5E20,
    contrast: #ffffff
  ),
  mint: (
    base: #A5D6A7, // Mint Green - soothing, organic, comforting
    light: #C8E6C9,
    dark: #81C784,
    contrast: #000000
  ),
  
  // Secondary Colors
  secondary: (
    base: #00897B, // Teal - refreshing, clean, medical care
    light: #26A69A,
    dark: #00695C,
    contrast: #ffffff
  ),
  sky: (
    base: #4FC3F7, // Sky Blue - trust, calmness, relaxation
    light: #80D4FA,
    dark: #0288D1,
    contrast: #ffffff
  ),
  sunshine: (
    base: #FBC02D, // Soft Yellow - warm, positive, uplifting
    light: #FFCF5C,
    dark: #F57F17,
    contrast: #000000
  ),
  deep-blue: (
    base: #1E3A8A, // Deep Blue - stability and professionalism
    light: #3949AB,
    dark: #0D47A1,
    contrast: #ffffff
  ),
  
  // Alert & Status Colors
  success: (
    base: #2E7D32, // Using Emerald Green for success instead
    light: #4C9A51,
    dark: #1B5E20,
    contrast: #ffffff
  ),
  warning: (
    base: #FFD54F, // Golden Yellow - pending actions, mild alerts
    light: #FFE082,
    dark: #FFC107,
    contrast: #000000
  ),
  danger: (
    base: #D32F2F, // Warm Red - immediate attention, critical alerts
    light: #E57373,
    dark: #B71C1C,
    contrast: #ffffff
  ),
  
  // Neutral Colors
  light: (
    base: #F8F9FA, // Light Ivory - soft, clean background
    dark: #ECEFF1,
    contrast: #000000
  ),
  medium: (
    base: #CFD8DC, // Cool Gray - gentle contrast for forms and tables
    dark: #B0BEC5,
    contrast: #000000
  ),
  dark: (
    base: #263238, // Deep Charcoal - text in dark mode
    light: #37474F,
    contrast: #ffffff
  )
);

// Text Colors
$text-colors: (
  primary: map-get(map-get($colors, dark), base),
  secondary: rgba(map-get(map-get($colors, dark), base), 0.7),
  tertiary: rgba(map-get(map-get($colors, dark), base), 0.5),
  light: map-get(map-get($colors, light), base),
  accent: map-get(map-get($colors, primary), base) // Emerald Green as accent color
);

// Theme Variables
:root {
  @each $color-name, $color-variants in $colors {
    @each $variant, $value in $color-variants {
      --ion-color-#{$color-name}-#{$variant}: #{$value};
    }
    
    // Create standard ionic color variables
    @if $color-name == 'primary' or $color-name == 'secondary' or 
        $color-name == 'success' or $color-name == 'warning' or 
        $color-name == 'danger' or $color-name == 'mint' {
      --ion-color-#{$color-name}: var(--ion-color-#{$color-name}-base);
      --ion-color-#{$color-name}-rgb: #{red(map-get(map-get($colors, $color-name), base))}, 
                                    #{green(map-get(map-get($colors, $color-name), base))}, 
                                    #{blue(map-get(map-get($colors, $color-name), base))};
      --ion-color-#{$color-name}-contrast: var(--ion-color-#{$color-name}-contrast);
      --ion-color-#{$color-name}-contrast-rgb: #{red(map-get(map-get($colors, $color-name), contrast))}, 
                                             #{green(map-get(map-get($colors, $color-name), contrast))}, 
                                             #{blue(map-get(map-get($colors, $color-name), contrast))};
      --ion-color-#{$color-name}-shade: var(--ion-color-#{$color-name}-dark);
      --ion-color-#{$color-name}-tint: var(--ion-color-#{$color-name}-light);
    }
  }
  
  // Text variables
  @each $text-name, $text-value in $text-colors {
    --ion-text-color-#{$text-name}: #{$text-value};
  }
  
  // Light Mode Background - Using a subtle mint tint
  --ion-background-color: #F5FAF6;
  --ion-background-color-rgb: 245, 250, 246;
  
  // Card & Item variables
  --ion-item-background: #ffffff;
  --ion-card-background: #ffffff;
  
  // Border variables
  --ion-border-color: var(--ion-color-mint-dark);
}

// Dark Mode Theme
.dark-theme {
  --ion-background-color: #1A2821; // Darker emerald-tinted background
  --ion-background-color-rgb: 26, 40, 33;
  
  --ion-text-color: var(--ion-color-light-base);
  --ion-text-color-rgb: #{red(map-get(map-get($colors, light), base))}, 
                         #{green(map-get(map-get($colors, light), base))}, 
                         #{blue(map-get(map-get($colors, light), base))};
  
  --ion-item-background: #263C2D; // Dark emerald tint
  --ion-card-background: #263C2D;
  
  --ion-border-color: rgba(165, 214, 167, 0.2); // Subtle mint border
}

// Custom Color Classes - Create ionic classes for custom colors
@each $color-name, $color-variants in $colors {
  .ion-color-#{$color-name} {
    --ion-color-base: var(--ion-color-#{$color-name}-base);
    --ion-color-base-rgb: var(--ion-color-#{$color-name}-rgb);
    --ion-color-contrast: var(--ion-color-#{$color-name}-contrast);
    --ion-color-contrast-rgb: var(--ion-color-#{$color-name}-contrast-rgb);
    --ion-color-shade: var(--ion-color-#{$color-name}-dark);
    --ion-color-tint: var(--ion-color-#{$color-name}-light);
  }
}

// Text utility classes
@each $text-name, $text-value in $text-colors {
  .text-#{$text-name} {
    color: var(--ion-text-color-#{$text-name});
  }
}

// Component styling
ion-header {
  ion-toolbar {
    --background: var(--ion-color-primary-base); // Emerald Green header
    --color: var(--ion-color-primary-contrast);
    
    ion-title {
      font-weight: 600;
    }
  }
}

ion-tab-bar {
  --background: var(--ion-color-primary-base); // Emerald Green tab bar
  --color: rgba(255, 255, 255, 0.7);
  
  ion-tab-button {
    --color-selected: var(--ion-color-mint-base); // Mint Green for selected tab
  }
}

// Buttons styling
ion-button {
  --border-radius: 8px;
  font-weight: 500;
  
  &.button-primary {
    --background: var(--ion-color-primary-base); // Emerald Green
    --color: var(--ion-color-primary-contrast);
  }
  
  &.button-secondary {
    --background: var(--ion-color-mint-base); // Mint Green
    --color: var(--ion-color-mint-contrast);
  }
  
  &.button-outline {
    --border-color: var(--ion-color-primary-base);
    --color: var(--ion-color-primary-base);
  }
}

// Card styling
ion-card {
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(46, 125, 50, 0.08); // Emerald-tinted shadow
  border-left: 3px solid var(--ion-color-primary-base); // Emerald accent
  
  ion-card-header {
    background-color: rgba(165, 214, 167, 0.1); // Subtle mint background
    
    ion-card-title {
      font-weight: 600;
      color: var(--ion-color-primary-base); // Emerald Green titles
    }
    
    ion-card-subtitle {
      color: var(--ion-text-color-secondary);
    }
  }
}

// List Items
ion-item {
  --padding-start: 16px;
  --padding-end: 16px;
  --min-height: 56px;
  
  &.item-interactive {
    --ripple-color: var(--ion-color-mint-base); // Mint ripple effect
  }
  
  &.selected-item {
    --background: rgba(165, 214, 167, 0.2); // Light mint background for selected items
    border-left: 3px solid var(--ion-color-primary-base); // Emerald accent
  }
}

// Form Elements
ion-input, ion-textarea, ion-select {
  --padding-start: 16px;
  --padding-end: 16px;
  --background: var(--ion-color-light-dark);
  --color: var(--ion-text-color-primary);
  margin-bottom: 8px;
  border-radius: 8px;
  
  &.has-focus {
    --background: var(--ion-color-light-base);
    box-shadow: 0 0 0 2px var(--ion-color-mint-base); // Mint focus ring
  }
}

// Alert/Modal Components
ion-alert {
  --backdrop-opacity: 0.5;
  
  .alert-wrapper {
    border-radius: 16px;
    border-top: 4px solid var(--ion-color-primary-base); // Emerald accent
  }
}

// Success, Warning, Error Styling
.alert-success {
  color: var(--ion-color-success-base);
  background-color: rgba(46, 125, 50, 0.15); // Emerald tint
  border-left: 4px solid var(--ion-color-success-base);
  padding: 12px 16px;
  border-radius: 8px;
}

.alert-warning {
  color: var(--ion-color-warning-dark);
  background-color: rgba(var(--ion-color-warning-base-rgb), 0.15);
  border-left: 4px solid var(--ion-color-warning-base);
  padding: 12px 16px;
  border-radius: 8px;
}

.alert-error {
  color: var(--ion-color-danger-base);
  background-color: rgba(var(--ion-color-danger-base-rgb), 0.15);
  border-left: 4px solid var(--ion-color-danger-base);
  padding: 12px 16px;
  border-radius: 8px;
}

// Badge styling
ion-badge {
  padding: 4px 8px;
  border-radius: 4px;
  
  &.badge-primary {
    background-color: var(--ion-color-primary-base); // Emerald Green
    color: var(--ion-color-primary-contrast);
  }
  
  &.badge-secondary {
    background-color: var(--ion-color-mint-base); // Mint Green
    color: var(--ion-color-mint-contrast);
  }
  
  &.badge-success {
    background-color: var(--ion-color-success-base);
    color: var(--ion-color-success-contrast);
  }
  
  &.badge-warning {
    background-color: var(--ion-color-warning-base);
    color: var(--ion-color-warning-contrast);
  }
  
  &.badge-danger {
    background-color: var(--ion-color-danger-base);
    color: var(--ion-color-danger-contrast);
  }
}

// Activity Indicators
.progress-circle {
  stroke: var(--ion-color-primary-base); // Emerald Green for progress indicators
  stroke-linecap: round;
}

// Helper classes for margins and paddings
@for $i from 1 through 5 {
  .m-#{$i} { margin: #{$i * 4}px; }
  .mt-#{$i} { margin-top: #{$i * 4}px; }
  .mb-#{$i} { margin-bottom: #{$i * 4}px; }
  .ml-#{$i} { margin-left: #{$i * 4}px; }
  .mr-#{$i} { margin-right: #{$i * 4}px; }
  
  .p-#{$i} { padding: #{$i * 4}px; }
  .pt-#{$i} { padding-top: #{$i * 4}px; }
  .pb-#{$i} { padding-bottom: #{$i * 4}px; }
  .pl-#{$i} { padding-left: #{$i * 4}px; }
  .pr-#{$i} { padding-right: #{$i * 4}px; }
}

// Animation variables
:root {
  --healixir-transition-fast: 150ms;
  --healixir-transition-normal: 250ms;
  --healixir-transition-slow: 400ms;
  --healixir-easing: cubic-bezier(0.4, 0, 0.2, 1);
}

// Common animations
.healixir-fade-in {
  animation: fadeIn var(--healixir-transition-normal) var(--healixir-easing);
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.healixir-slide-up {
  animation: slideUp var(--healixir-transition-normal) var(--healixir-easing);
}

@keyframes slideUp {
  from { transform: translateY(20px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

// Emerald & Mint accent utilities
.emerald-border-left {
  border-left: 3px solid var(--ion-color-primary-base);
}

.mint-background {
  background-color: rgba(165, 214, 167, 0.15);
}

.emerald-accent {
  color: var(--ion-color-primary-base);
}

.mint-accent {
  color: var(--ion-color-mint-base);
}

